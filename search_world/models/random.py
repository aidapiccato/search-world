
class DiscreteBeliefState(object):
    def __init__(self, env):
        self._state_space = env.state_space
        self._observation_space = env.observation_space
        self._action_space = env.action_space
        self._b = None

    def reset(self):
        """Reset belief state to uniform distribution over state space or given initial distribution
        """

        self._b = {state: 1/self._state_space.shape() for state in self._state_space}

    def update(self, obs, action):
        """Bayesian update of belief state given current observation

        Args:
            obs (object): observation emitted by environment
            action (object): action performed by agent
        """
        b_prime = {}

        total_prob = 0
        for state_prime in self._state_space:
            p_obs = self._observation_space.probability(obs, state_prime, action)
            p_next_state = self._b[state_prime]
            b_prime.update({state_prime: p_obs * p_next_state})
            total_prob += p_obs * p_next_state

        for s, p in b_prime.iteritems():
            b_prime[s] = p/total_prob

        self._b = b_prime

class BeliefUpdatingRandomAgent(object):
    def __init__(self, env):
        self._env = env
        self._belief_state = DiscreteBeliefState(self._env)
        self._action_space = env._action_space
    
    def reset(self):
        self._belief_state.reset()
        self._action = None

    def __call__(self, obs):
        """Updates belief over possible current states given current observation and previous action

        Args:
            obs (object): observation generated by environment

        Returns:
            object: action
        """
        self._belief_state.update(obs, self._action)
        self._action = self._action_space.sample()
        return self._action

class RandomAgent(object):
    def __init__(self, env):
        self._env = env
        self._action_space = self._env.action_space

    def __call__(self, obs):
        """Randomly samples from action space.

        Args:
            obs (object): observation generated by environment

        Returns:
            object: action
        """
        return self._action_space.sample()
